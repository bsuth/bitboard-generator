{"version":3,"sources":["script.js"],"names":["selectors","boards","activeBoard","bitboard","bits","hex","bitClick","i","bit","zeroCounter","Math","floor","classList","contains","remove","add","innerHTML","reduce","str","n","toString","repeat","resetBitboard","length","onclick","getElementsByClassName","Array","ceil","fill","boardToggle","event","target","newActiveBoard","dataset","board","id","style","display","window","addEventListener","document","getElementById"],"mappings":"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","file":"script.3b77e0c3.js","sourceRoot":"../src","sourcesContent":["// -----------------------------------------------------------------------------\n// VARIABLES / STATE\n// -----------------------------------------------------------------------------\n\nlet selectors, boards, activeBoard, bitboard, bits, hex;\n\n// -----------------------------------------------------------------------------\n// BITBOARD\n// -----------------------------------------------------------------------------\n\nfunction bitClick(i) {\n\tlet bit = bits[i], zeroCounter = 0;\n\n\thex[Math.floor(i / 4)] ^= 1 << (i % 4);\n\n\tbit.classList.contains('active') ?\n\t\tbit.classList.remove('active') :\n\t\tbit.classList.add('active');\n\n\tbitboard.innerHTML = '0x' + (hex.reduce((str, n) => {\n\t\tif (n == 0) {\n\t\t\t++zeroCounter;\n\t\t} else {\n\t\t\tstr = n.toString(16) + '0'.repeat(zeroCounter) + str;\n\t\t\tzeroCounter = 0;\n\t\t}\n\n\t\treturn str;\n\t}, '') || '0');\n}\n\nfunction resetBitboard() {\n\tif (bits) {\n\t\tfor (let i = 0; i < bits.length; ++i) {\n\t\t\tbits[i].onclick = null;\n\t\t\tbits[i].classList.remove('active');\n\t\t}\n\t}\n\n\tbits = activeBoard.getElementsByClassName('bit');\n\thex = new Array(Math.ceil(bits.length / 4)).fill(0);\n\tbitboard.innerHTML = '0x0';\n\n\tfor (let i = 0; i < bits.length; ++i)\n\t\tbits[i].onclick = () => bitClick(i);\n}\n\n// -----------------------------------------------------------------------------\n// BOARD SELECT\n// -----------------------------------------------------------------------------\n\nfunction boardToggle(event) {\n\tfor (let i = 0; i < selectors.length; ++i)\n\t\tselectors[i].classList.remove('active');\n\tevent.target.classList.add('active');\n\n\tlet newActiveBoard = event.target.dataset.board;\n\n\tfor (let board of boards) {\n\t\tif (board.id == newActiveBoard) {\n\t\t\t// only reset bitboard if board is actually new\n\t\t\tif (board != activeBoard) {\n\t\t\t\tactiveBoard = board;\n\t\t\t\tboard.style.display = 'grid';\n\t\t\t\tresetBitboard();\n\t\t\t}\n\t\t} else {\n\t\t\tboard.style.display = 'none';\n\t\t}\n\t}\n}\n\n// -----------------------------------------------------------------------------\n// ON LOAD\n// -----------------------------------------------------------------------------\n\nwindow.addEventListener('load', () => {\n\tselectors = document.getElementsByClassName('selector');\n\tboards = document.getElementsByClassName('board');\n\tactiveBoard = boards[0];\n\tbitboard = document.getElementById('bitboard');\n\n\tfor (let i = 0; i < selectors.length; ++i)\n\t\tselectors[i].addEventListener('click', boardToggle);\n\tselectors[0].classList.add('active');\n\n\tresetBitboard();\n});\n\n"]}